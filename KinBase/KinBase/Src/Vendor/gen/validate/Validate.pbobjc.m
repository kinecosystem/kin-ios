// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate/validate.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Validate.pbobjc.h"
#import "Descriptor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ValidateRoot

@implementation ValidateRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
      {
        .defaultValue.valueBool = NO,
        .singletonName = GPBStringifySymbol(ValidateRoot_disabled),
        .extendedClass = GPBStringifySymbol(GPBMessageOptions),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1071,
        .dataType = GPBDataTypeBool,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueBool = NO,
        .singletonName = GPBStringifySymbol(ValidateRoot_ignored),
        .extendedClass = GPBStringifySymbol(GPBMessageOptions),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1072,
        .dataType = GPBDataTypeBool,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueBool = NO,
        .singletonName = GPBStringifySymbol(ValidateRoot_required),
        .extendedClass = GPBStringifySymbol(GPBOneofOptions),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1071,
        .dataType = GPBDataTypeBool,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ValidateRoot_rules),
        .extendedClass = GPBStringifySymbol(GPBFieldOptions),
        .messageOrGroupClassName = GPBStringifySymbol(FieldRules),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1071,
        .dataType = GPBDataTypeMessage,
        .options = GPBExtensionNone,
      },
    };
    for (size_t i = 0; i < sizeof(descriptions) / sizeof(descriptions[0]); ++i) {
      GPBExtensionDescriptor *extension =
          [[GPBExtensionDescriptor alloc] initWithExtensionDescription:&descriptions[i]];
      [registry addExtension:extension];
      [self globallyRegisterExtension:extension];
      [extension release];
    }
    // None of the imports (direct or indirect) defined extensions, so no need to add
    // them to this registry.
  }
  return registry;
}

@end

#pragma mark - ValidateRoot_FileDescriptor

static GPBFileDescriptor *ValidateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"validate"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum KnownRegex

GPBEnumDescriptor *KnownRegex_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000HTTPHeaderName\000HTTPHeaderValue\000";
    static const int32_t values[] = {
        KnownRegex_Unknown,
        KnownRegex_HTTPHeaderName,
        KnownRegex_HTTPHeaderValue,
    };
    static const char *extraTextFormatInfo = "\002\001\004\346\344\000\002\004\346\345\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(KnownRegex)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:KnownRegex_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL KnownRegex_IsValidValue(int32_t value__) {
  switch (value__) {
    case KnownRegex_Unknown:
    case KnownRegex_HTTPHeaderName:
    case KnownRegex_HTTPHeaderValue:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FieldRules

@implementation FieldRules

@dynamic typeOneOfCase;
@dynamic hasMessage, message;
@dynamic float_p;
@dynamic double_p;
@dynamic int32;
@dynamic int64;
@dynamic uint32;
@dynamic uint64;
@dynamic sint32;
@dynamic sint64;
@dynamic fixed32;
@dynamic fixed64;
@dynamic sfixed32;
@dynamic sfixed64;
@dynamic bool_p;
@dynamic string;
@dynamic bytes;
@dynamic enum_p;
@dynamic repeated;
@dynamic map;
@dynamic any;
@dynamic duration;
@dynamic timestamp;

typedef struct FieldRules__storage_ {
  uint32_t _has_storage_[2];
  FloatRules *float_p;
  DoubleRules *double_p;
  Int32Rules *int32;
  Int64Rules *int64;
  UInt32Rules *uint32;
  UInt64Rules *uint64;
  SInt32Rules *sint32;
  SInt64Rules *sint64;
  Fixed32Rules *fixed32;
  Fixed64Rules *fixed64;
  SFixed32Rules *sfixed32;
  SFixed64Rules *sfixed64;
  BoolRules *bool_p;
  StringRules *string;
  BytesRules *bytes;
  EnumRules *enum_p;
  MessageRules *message;
  RepeatedRules *repeated;
  MapRules *map;
  AnyRules *any;
  DurationRules *duration;
  TimestampRules *timestamp;
} FieldRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "float_p",
        .dataTypeSpecific.className = GPBStringifySymbol(FloatRules),
        .number = FieldRules_FieldNumber_Float_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, float_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "double_p",
        .dataTypeSpecific.className = GPBStringifySymbol(DoubleRules),
        .number = FieldRules_FieldNumber_Double_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, double_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "int32",
        .dataTypeSpecific.className = GPBStringifySymbol(Int32Rules),
        .number = FieldRules_FieldNumber_Int32,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, int32),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "int64",
        .dataTypeSpecific.className = GPBStringifySymbol(Int64Rules),
        .number = FieldRules_FieldNumber_Int64,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, int64),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uint32",
        .dataTypeSpecific.className = GPBStringifySymbol(UInt32Rules),
        .number = FieldRules_FieldNumber_Uint32,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, uint32),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uint64",
        .dataTypeSpecific.className = GPBStringifySymbol(UInt64Rules),
        .number = FieldRules_FieldNumber_Uint64,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, uint64),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sint32",
        .dataTypeSpecific.className = GPBStringifySymbol(SInt32Rules),
        .number = FieldRules_FieldNumber_Sint32,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, sint32),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sint64",
        .dataTypeSpecific.className = GPBStringifySymbol(SInt64Rules),
        .number = FieldRules_FieldNumber_Sint64,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, sint64),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fixed32",
        .dataTypeSpecific.className = GPBStringifySymbol(Fixed32Rules),
        .number = FieldRules_FieldNumber_Fixed32,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, fixed32),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fixed64",
        .dataTypeSpecific.className = GPBStringifySymbol(Fixed64Rules),
        .number = FieldRules_FieldNumber_Fixed64,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, fixed64),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sfixed32",
        .dataTypeSpecific.className = GPBStringifySymbol(SFixed32Rules),
        .number = FieldRules_FieldNumber_Sfixed32,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, sfixed32),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sfixed64",
        .dataTypeSpecific.className = GPBStringifySymbol(SFixed64Rules),
        .number = FieldRules_FieldNumber_Sfixed64,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, sfixed64),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bool_p",
        .dataTypeSpecific.className = GPBStringifySymbol(BoolRules),
        .number = FieldRules_FieldNumber_Bool_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, bool_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "string",
        .dataTypeSpecific.className = GPBStringifySymbol(StringRules),
        .number = FieldRules_FieldNumber_String,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, string),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bytes",
        .dataTypeSpecific.className = GPBStringifySymbol(BytesRules),
        .number = FieldRules_FieldNumber_Bytes,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, bytes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enum_p",
        .dataTypeSpecific.className = GPBStringifySymbol(EnumRules),
        .number = FieldRules_FieldNumber_Enum_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, enum_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(MessageRules),
        .number = FieldRules_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FieldRules__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "repeated",
        .dataTypeSpecific.className = GPBStringifySymbol(RepeatedRules),
        .number = FieldRules_FieldNumber_Repeated,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, repeated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "map",
        .dataTypeSpecific.className = GPBStringifySymbol(MapRules),
        .number = FieldRules_FieldNumber_Map,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, map),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "any",
        .dataTypeSpecific.className = GPBStringifySymbol(AnyRules),
        .number = FieldRules_FieldNumber_Any,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, any),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = GPBStringifySymbol(DurationRules),
        .number = FieldRules_FieldNumber_Duration,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(TimestampRules),
        .number = FieldRules_FieldNumber_Timestamp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FieldRules__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FieldRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FieldRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "type",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void FieldRules_ClearTypeOneOfCase(FieldRules *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - FloatRules

@implementation FloatRules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct FloatRules__storage_ {
  uint32_t _has_storage_[1];
  float const_p;
  float lt;
  float lte;
  float gt;
  float gte;
  GPBFloatArray *inArray;
  GPBFloatArray *notInArray;
} FloatRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FloatRules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FloatRules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FloatRules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FloatRules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FloatRules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FloatRules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FloatRules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = FloatRules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FloatRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FloatRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DoubleRules

@implementation DoubleRules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct DoubleRules__storage_ {
  uint32_t _has_storage_[1];
  GPBDoubleArray *inArray;
  GPBDoubleArray *notInArray;
  double const_p;
  double lt;
  double lte;
  double gt;
  double gte;
} DoubleRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DoubleRules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DoubleRules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DoubleRules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DoubleRules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DoubleRules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DoubleRules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DoubleRules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DoubleRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DoubleRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Int32Rules

@implementation Int32Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct Int32Rules__storage_ {
  uint32_t _has_storage_[1];
  int32_t const_p;
  int32_t lt;
  int32_t lte;
  int32_t gt;
  int32_t gte;
  GPBInt32Array *inArray;
  GPBInt32Array *notInArray;
} Int32Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Int32Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Int32Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Int32Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Int32Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Int32Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Int32Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Int32Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = Int32Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Int32Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Int32Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Int64Rules

@implementation Int64Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct Int64Rules__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *inArray;
  GPBInt64Array *notInArray;
  int64_t const_p;
  int64_t lt;
  int64_t lte;
  int64_t gt;
  int64_t gte;
} Int64Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Int64Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Int64Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Int64Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Int64Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Int64Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Int64Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Int64Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = Int64Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Int64Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Int64Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UInt32Rules

@implementation UInt32Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct UInt32Rules__storage_ {
  uint32_t _has_storage_[1];
  uint32_t const_p;
  uint32_t lt;
  uint32_t lte;
  uint32_t gt;
  uint32_t gte;
  GPBUInt32Array *inArray;
  GPBUInt32Array *notInArray;
} UInt32Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UInt32Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UInt32Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UInt32Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UInt32Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UInt32Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UInt32Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UInt32Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = UInt32Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UInt32Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UInt32Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UInt64Rules

@implementation UInt64Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct UInt64Rules__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *inArray;
  GPBUInt64Array *notInArray;
  uint64_t const_p;
  uint64_t lt;
  uint64_t lte;
  uint64_t gt;
  uint64_t gte;
} UInt64Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UInt64Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UInt64Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UInt64Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UInt64Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UInt64Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UInt64Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UInt64Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = UInt64Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UInt64Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UInt64Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SInt32Rules

@implementation SInt32Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct SInt32Rules__storage_ {
  uint32_t _has_storage_[1];
  int32_t const_p;
  int32_t lt;
  int32_t lte;
  int32_t gt;
  int32_t gte;
  GPBInt32Array *inArray;
  GPBInt32Array *notInArray;
} SInt32Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SInt32Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SInt32Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SInt32Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SInt32Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SInt32Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SInt32Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SInt32Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = SInt32Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SInt32Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SInt32Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SInt64Rules

@implementation SInt64Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct SInt64Rules__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *inArray;
  GPBInt64Array *notInArray;
  int64_t const_p;
  int64_t lt;
  int64_t lte;
  int64_t gt;
  int64_t gte;
} SInt64Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SInt64Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SInt64Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SInt64Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SInt64Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SInt64Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SInt64Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SInt64Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = SInt64Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SInt64Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SInt64Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Fixed32Rules

@implementation Fixed32Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct Fixed32Rules__storage_ {
  uint32_t _has_storage_[1];
  uint32_t const_p;
  uint32_t lt;
  uint32_t lte;
  uint32_t gt;
  uint32_t gte;
  GPBUInt32Array *inArray;
  GPBUInt32Array *notInArray;
} Fixed32Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Fixed32Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Fixed32Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Fixed32Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Fixed32Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Fixed32Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Fixed32Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Fixed32Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = Fixed32Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Fixed32Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Fixed32Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Fixed64Rules

@implementation Fixed64Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct Fixed64Rules__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *inArray;
  GPBUInt64Array *notInArray;
  uint64_t const_p;
  uint64_t lt;
  uint64_t lte;
  uint64_t gt;
  uint64_t gte;
} Fixed64Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Fixed64Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Fixed64Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Fixed64Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Fixed64Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Fixed64Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Fixed64Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Fixed64Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = Fixed64Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Fixed64Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Fixed64Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SFixed32Rules

@implementation SFixed32Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct SFixed32Rules__storage_ {
  uint32_t _has_storage_[1];
  int32_t const_p;
  int32_t lt;
  int32_t lte;
  int32_t gt;
  int32_t gte;
  GPBInt32Array *inArray;
  GPBInt32Array *notInArray;
} SFixed32Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SFixed32Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed32,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SFixed32Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed32,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SFixed32Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed32,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SFixed32Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed32,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SFixed32Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed32,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SFixed32Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSFixed32,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SFixed32Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSFixed32,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = SFixed32Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SFixed32Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SFixed32Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SFixed64Rules

@implementation SFixed64Rules

@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct SFixed64Rules__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *inArray;
  GPBInt64Array *notInArray;
  int64_t const_p;
  int64_t lt;
  int64_t lte;
  int64_t gt;
  int64_t gte;
} SFixed64Rules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SFixed64Rules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed64,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_Lt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SFixed64Rules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed64,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_Lte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SFixed64Rules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed64,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_Gt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SFixed64Rules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed64,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_Gte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SFixed64Rules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSFixed64,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SFixed64Rules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSFixed64,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SFixed64Rules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeSFixed64,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = SFixed64Rules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SFixed64Rules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SFixed64Rules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BoolRules

@implementation BoolRules

@dynamic hasConst_p, const_p;

typedef struct BoolRules__storage_ {
  uint32_t _has_storage_[1];
} BoolRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = BoolRules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BoolRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BoolRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StringRules

@implementation StringRules

@dynamic wellKnownOneOfCase;
@dynamic hasConst_p, const_p;
@dynamic hasLen, len;
@dynamic hasMinLen, minLen;
@dynamic hasMaxLen, maxLen;
@dynamic hasLenBytes, lenBytes;
@dynamic hasMinBytes, minBytes;
@dynamic hasMaxBytes, maxBytes;
@dynamic hasPattern, pattern;
@dynamic hasPrefix, prefix;
@dynamic hasSuffix, suffix;
@dynamic hasContains, contains;
@dynamic hasNotContains, notContains;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic email;
@dynamic hostname;
@dynamic ip;
@dynamic ipv4;
@dynamic ipv6;
@dynamic uri;
@dynamic uriRef;
@dynamic address;
@dynamic uuid;
@dynamic wellKnownRegex;
@dynamic hasStrict, strict;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct StringRules__storage_ {
  uint32_t _has_storage_[2];
  KnownRegex wellKnownRegex;
  NSString *const_p;
  NSString *pattern;
  NSString *prefix;
  NSString *suffix;
  NSString *contains;
  NSMutableArray *inArray;
  NSMutableArray *notInArray;
  NSString *notContains;
  uint64_t minLen;
  uint64_t maxLen;
  uint64_t minBytes;
  uint64_t maxBytes;
  uint64_t len;
  uint64_t lenBytes;
} StringRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "const_p",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Const_p,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, const_p),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueUInt64 = 0ULL,
        .core.name = "minLen",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_MinLen,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, minLen),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt64,
      },
      {
        .defaultValue.valueUInt64 = 0ULL,
        .core.name = "maxLen",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_MaxLen,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, maxLen),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt64,
      },
      {
        .defaultValue.valueUInt64 = 0ULL,
        .core.name = "minBytes",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_MinBytes,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, minBytes),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt64,
      },
      {
        .defaultValue.valueUInt64 = 0ULL,
        .core.name = "maxBytes",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_MaxBytes,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, maxBytes),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt64,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "pattern",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Pattern,
        .core.hasIndex = 7,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, pattern),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "prefix",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Prefix,
        .core.hasIndex = 8,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, prefix),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "suffix",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Suffix,
        .core.hasIndex = 9,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, suffix),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "contains",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Contains,
        .core.hasIndex = 10,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, contains),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "inArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_InArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, inArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "notInArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_NotInArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, notInArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "email",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Email,
        .core.hasIndex = -1,
        .core.offset = 12,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "hostname",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Hostname,
        .core.hasIndex = -1,
        .core.offset = 13,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "ip",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Ip,
        .core.hasIndex = -1,
        .core.offset = 14,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "ipv4",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Ipv4,
        .core.hasIndex = -1,
        .core.offset = 15,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "ipv6",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Ipv6,
        .core.hasIndex = -1,
        .core.offset = 16,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "uri",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Uri,
        .core.hasIndex = -1,
        .core.offset = 17,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "uriRef",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_UriRef,
        .core.hasIndex = -1,
        .core.offset = 18,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueUInt64 = 0ULL,
        .core.name = "len",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Len,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, len),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt64,
      },
      {
        .defaultValue.valueUInt64 = 0ULL,
        .core.name = "lenBytes",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_LenBytes,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, lenBytes),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt64,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "address",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Address,
        .core.hasIndex = -1,
        .core.offset = 19,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "uuid",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Uuid,
        .core.hasIndex = -1,
        .core.offset = 20,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "notContains",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_NotContains,
        .core.hasIndex = 11,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, notContains),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = KnownRegex_Unknown,
        .core.name = "wellKnownRegex",
        .core.dataTypeSpecific.enumDescFunc = KnownRegex_EnumDescriptor,
        .core.number = StringRules_FieldNumber_WellKnownRegex,
        .core.hasIndex = -1,
        .core.offset = (uint32_t)offsetof(StringRules__storage_, wellKnownRegex),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueBool = YES,
        .core.name = "strict",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_Strict,
        .core.hasIndex = 21,
        .core.offset = 22,  // Stored in _has_storage_ to save space.
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .core.dataType = GPBDataTypeBool,
      },
      {
        .defaultValue.valueBool = NO,
        .core.name = "ignoreEmpty",
        .core.dataTypeSpecific.className = NULL,
        .core.number = StringRules_FieldNumber_IgnoreEmpty,
        .core.hasIndex = 23,
        .core.offset = 24,  // Stored in _has_storage_ to save space.
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StringRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(StringRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    static const char *oneofs[] = {
      "wellKnown",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void StringRules_ClearWellKnownOneOfCase(StringRules *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - BytesRules

@implementation BytesRules

@dynamic wellKnownOneOfCase;
@dynamic hasConst_p, const_p;
@dynamic hasLen, len;
@dynamic hasMinLen, minLen;
@dynamic hasMaxLen, maxLen;
@dynamic hasPattern, pattern;
@dynamic hasPrefix, prefix;
@dynamic hasSuffix, suffix;
@dynamic hasContains, contains;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;
@dynamic ip;
@dynamic ipv4;
@dynamic ipv6;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct BytesRules__storage_ {
  uint32_t _has_storage_[2];
  NSData *const_p;
  NSString *pattern;
  NSData *prefix;
  NSData *suffix;
  NSData *contains;
  NSMutableArray *inArray;
  NSMutableArray *notInArray;
  uint64_t minLen;
  uint64_t maxLen;
  uint64_t len;
} BytesRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BytesRules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "minLen",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_MinLen,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BytesRules__storage_, minLen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "maxLen",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_MaxLen,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BytesRules__storage_, maxLen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pattern",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Pattern,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BytesRules__storage_, pattern),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prefix",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Prefix,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BytesRules__storage_, prefix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "suffix",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Suffix,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(BytesRules__storage_, suffix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contains",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Contains,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(BytesRules__storage_, contains),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BytesRules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BytesRules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Ip,
        .hasIndex = -1,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ipv4",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Ipv4,
        .hasIndex = -1,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ipv6",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Ipv6,
        .hasIndex = -1,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "len",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BytesRules__storage_, len),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = BytesRules_FieldNumber_IgnoreEmpty,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BytesRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BytesRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "wellKnown",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void BytesRules_ClearWellKnownOneOfCase(BytesRules *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - EnumRules

@implementation EnumRules

@dynamic hasConst_p, const_p;
@dynamic hasDefinedOnly, definedOnly;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;

typedef struct EnumRules__storage_ {
  uint32_t _has_storage_[1];
  int32_t const_p;
  GPBInt32Array *inArray;
  GPBInt32Array *notInArray;
} EnumRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "const_p",
        .dataTypeSpecific.className = NULL,
        .number = EnumRules_FieldNumber_Const_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EnumRules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "definedOnly",
        .dataTypeSpecific.className = NULL,
        .number = EnumRules_FieldNumber_DefinedOnly,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = EnumRules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EnumRules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = EnumRules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EnumRules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EnumRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EnumRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageRules

@implementation MessageRules

@dynamic hasSkip, skip;
@dynamic hasRequired, required;

typedef struct MessageRules__storage_ {
  uint32_t _has_storage_[1];
} MessageRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "skip",
        .dataTypeSpecific.className = NULL,
        .number = MessageRules_FieldNumber_Skip,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "required",
        .dataTypeSpecific.className = NULL,
        .number = MessageRules_FieldNumber_Required,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RepeatedRules

@implementation RepeatedRules

@dynamic hasMinItems, minItems;
@dynamic hasMaxItems, maxItems;
@dynamic hasUnique, unique;
@dynamic hasItems, items;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct RepeatedRules__storage_ {
  uint32_t _has_storage_[1];
  FieldRules *items;
  uint64_t minItems;
  uint64_t maxItems;
} RepeatedRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minItems",
        .dataTypeSpecific.className = NULL,
        .number = RepeatedRules_FieldNumber_MinItems,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RepeatedRules__storage_, minItems),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "maxItems",
        .dataTypeSpecific.className = NULL,
        .number = RepeatedRules_FieldNumber_MaxItems,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RepeatedRules__storage_, maxItems),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "unique",
        .dataTypeSpecific.className = NULL,
        .number = RepeatedRules_FieldNumber_Unique,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "items",
        .dataTypeSpecific.className = GPBStringifySymbol(FieldRules),
        .number = RepeatedRules_FieldNumber_Items,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RepeatedRules__storage_, items),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = RepeatedRules_FieldNumber_IgnoreEmpty,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RepeatedRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RepeatedRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MapRules

@implementation MapRules

@dynamic hasMinPairs, minPairs;
@dynamic hasMaxPairs, maxPairs;
@dynamic hasNoSparse, noSparse;
@dynamic hasKeys, keys;
@dynamic hasValues, values;
@dynamic hasIgnoreEmpty, ignoreEmpty;

typedef struct MapRules__storage_ {
  uint32_t _has_storage_[1];
  FieldRules *keys;
  FieldRules *values;
  uint64_t minPairs;
  uint64_t maxPairs;
} MapRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minPairs",
        .dataTypeSpecific.className = NULL,
        .number = MapRules_FieldNumber_MinPairs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MapRules__storage_, minPairs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "maxPairs",
        .dataTypeSpecific.className = NULL,
        .number = MapRules_FieldNumber_MaxPairs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MapRules__storage_, maxPairs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "noSparse",
        .dataTypeSpecific.className = NULL,
        .number = MapRules_FieldNumber_NoSparse,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "keys",
        .dataTypeSpecific.className = GPBStringifySymbol(FieldRules),
        .number = MapRules_FieldNumber_Keys,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MapRules__storage_, keys),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "values",
        .dataTypeSpecific.className = GPBStringifySymbol(FieldRules),
        .number = MapRules_FieldNumber_Values,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MapRules__storage_, values),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ignoreEmpty",
        .dataTypeSpecific.className = NULL,
        .number = MapRules_FieldNumber_IgnoreEmpty,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MapRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MapRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnyRules

@implementation AnyRules

@dynamic hasRequired, required;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;

typedef struct AnyRules__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *inArray;
  NSMutableArray *notInArray;
} AnyRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "required",
        .dataTypeSpecific.className = NULL,
        .number = AnyRules_FieldNumber_Required,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = NULL,
        .number = AnyRules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnyRules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = NULL,
        .number = AnyRules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnyRules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnyRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnyRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DurationRules

@implementation DurationRules

@dynamic hasRequired, required;
@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic inArray, inArray_Count;
@dynamic notInArray, notInArray_Count;

typedef struct DurationRules__storage_ {
  uint32_t _has_storage_[1];
  GPBDuration *const_p;
  GPBDuration *lt;
  GPBDuration *lte;
  GPBDuration *gt;
  GPBDuration *gte;
  NSMutableArray *inArray;
  NSMutableArray *notInArray;
} DurationRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "required",
        .dataTypeSpecific.className = NULL,
        .number = DurationRules_FieldNumber_Required,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "const_p",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = DurationRules_FieldNumber_Const_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DurationRules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = DurationRules_FieldNumber_Lt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DurationRules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = DurationRules_FieldNumber_Lte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DurationRules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = DurationRules_FieldNumber_Gt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DurationRules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = DurationRules_FieldNumber_Gte,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DurationRules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = DurationRules_FieldNumber_InArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DurationRules__storage_, inArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notInArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = DurationRules_FieldNumber_NotInArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DurationRules__storage_, notInArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DurationRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DurationRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TimestampRules

@implementation TimestampRules

@dynamic hasRequired, required;
@dynamic hasConst_p, const_p;
@dynamic hasLt, lt;
@dynamic hasLte, lte;
@dynamic hasGt, gt;
@dynamic hasGte, gte;
@dynamic hasLtNow, ltNow;
@dynamic hasGtNow, gtNow;
@dynamic hasWithin, within;

typedef struct TimestampRules__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *const_p;
  GPBTimestamp *lt;
  GPBTimestamp *lte;
  GPBTimestamp *gt;
  GPBTimestamp *gte;
  GPBDuration *within;
} TimestampRules__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "required",
        .dataTypeSpecific.className = NULL,
        .number = TimestampRules_FieldNumber_Required,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "const_p",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = TimestampRules_FieldNumber_Const_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TimestampRules__storage_, const_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lt",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = TimestampRules_FieldNumber_Lt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TimestampRules__storage_, lt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lte",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = TimestampRules_FieldNumber_Lte,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TimestampRules__storage_, lte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gt",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = TimestampRules_FieldNumber_Gt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TimestampRules__storage_, gt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gte",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = TimestampRules_FieldNumber_Gte,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TimestampRules__storage_, gte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ltNow",
        .dataTypeSpecific.className = NULL,
        .number = TimestampRules_FieldNumber_LtNow,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "gtNow",
        .dataTypeSpecific.className = NULL,
        .number = TimestampRules_FieldNumber_GtNow,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "within",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = TimestampRules_FieldNumber_Within,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(TimestampRules__storage_, within),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TimestampRules class]
                                     rootClass:[ValidateRoot class]
                                          file:ValidateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TimestampRules__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
