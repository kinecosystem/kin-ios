// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction/v4/transaction_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "transaction/v4/TransactionService.pbobjc.h"
#import "validate/Validate.pbobjc.h"
#import "common/v3/Model.pbobjc.h"
#import "common/v4/Model.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - APBTransactionV4TransactionServiceRoot

@implementation APBTransactionV4TransactionServiceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - APBTransactionV4TransactionServiceRoot_FileDescriptor

static GPBFileDescriptor *APBTransactionV4TransactionServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"kin.agora.transaction.v4"
                                                 objcPrefix:@"APBTransactionV4"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - APBTransactionV4GetServiceConfigRequest

@implementation APBTransactionV4GetServiceConfigRequest


typedef struct APBTransactionV4GetServiceConfigRequest__storage_ {
  uint32_t _has_storage_[1];
} APBTransactionV4GetServiceConfigRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetServiceConfigRequest class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(APBTransactionV4GetServiceConfigRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetServiceConfigResponse

@implementation APBTransactionV4GetServiceConfigResponse

@dynamic hasSubsidizerAccount, subsidizerAccount;
@dynamic hasTokenProgram, tokenProgram;
@dynamic hasToken, token;

typedef struct APBTransactionV4GetServiceConfigResponse__storage_ {
  uint32_t _has_storage_[1];
  APBCommonV4SolanaAccountId *subsidizerAccount;
  APBCommonV4SolanaAccountId *tokenProgram;
  APBCommonV4SolanaAccountId *token;
} APBTransactionV4GetServiceConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subsidizerAccount",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4SolanaAccountId),
        .number = APBTransactionV4GetServiceConfigResponse_FieldNumber_SubsidizerAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetServiceConfigResponse__storage_, subsidizerAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenProgram",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4SolanaAccountId),
        .number = APBTransactionV4GetServiceConfigResponse_FieldNumber_TokenProgram,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4GetServiceConfigResponse__storage_, tokenProgram),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4SolanaAccountId),
        .number = APBTransactionV4GetServiceConfigResponse_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBTransactionV4GetServiceConfigResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetServiceConfigResponse class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetServiceConfigResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetMinimumKinVersionRequest

@implementation APBTransactionV4GetMinimumKinVersionRequest


typedef struct APBTransactionV4GetMinimumKinVersionRequest__storage_ {
  uint32_t _has_storage_[1];
} APBTransactionV4GetMinimumKinVersionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetMinimumKinVersionRequest class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(APBTransactionV4GetMinimumKinVersionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetMinimumKinVersionResponse

@implementation APBTransactionV4GetMinimumKinVersionResponse

@dynamic version;

typedef struct APBTransactionV4GetMinimumKinVersionResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
} APBTransactionV4GetMinimumKinVersionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4GetMinimumKinVersionResponse_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetMinimumKinVersionResponse__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetMinimumKinVersionResponse class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetMinimumKinVersionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetRecentBlockhashRequest

@implementation APBTransactionV4GetRecentBlockhashRequest


typedef struct APBTransactionV4GetRecentBlockhashRequest__storage_ {
  uint32_t _has_storage_[1];
} APBTransactionV4GetRecentBlockhashRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetRecentBlockhashRequest class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(APBTransactionV4GetRecentBlockhashRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetRecentBlockhashResponse

@implementation APBTransactionV4GetRecentBlockhashResponse

@dynamic hasBlockhash, blockhash;

typedef struct APBTransactionV4GetRecentBlockhashResponse__storage_ {
  uint32_t _has_storage_[1];
  APBCommonV4Blockhash *blockhash;
} APBTransactionV4GetRecentBlockhashResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockhash",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4Blockhash),
        .number = APBTransactionV4GetRecentBlockhashResponse_FieldNumber_Blockhash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetRecentBlockhashResponse__storage_, blockhash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetRecentBlockhashResponse class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetRecentBlockhashResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetMinimumBalanceForRentExemptionRequest

@implementation APBTransactionV4GetMinimumBalanceForRentExemptionRequest

@dynamic size;

typedef struct APBTransactionV4GetMinimumBalanceForRentExemptionRequest__storage_ {
  uint32_t _has_storage_[1];
  uint64_t size;
} APBTransactionV4GetMinimumBalanceForRentExemptionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4GetMinimumBalanceForRentExemptionRequest_FieldNumber_Size,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetMinimumBalanceForRentExemptionRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetMinimumBalanceForRentExemptionRequest class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetMinimumBalanceForRentExemptionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetMinimumBalanceForRentExemptionResponse

@implementation APBTransactionV4GetMinimumBalanceForRentExemptionResponse

@dynamic lamports;

typedef struct APBTransactionV4GetMinimumBalanceForRentExemptionResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t lamports;
} APBTransactionV4GetMinimumBalanceForRentExemptionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lamports",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4GetMinimumBalanceForRentExemptionResponse_FieldNumber_Lamports,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetMinimumBalanceForRentExemptionResponse__storage_, lamports),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetMinimumBalanceForRentExemptionResponse class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetMinimumBalanceForRentExemptionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4GetHistoryRequest

@implementation APBTransactionV4GetHistoryRequest

@dynamic hasAccountId, accountId;
@dynamic hasCursor, cursor;
@dynamic direction;

typedef struct APBTransactionV4GetHistoryRequest__storage_ {
  uint32_t _has_storage_[1];
  APBTransactionV4GetHistoryRequest_Direction direction;
  APBCommonV4SolanaAccountId *accountId;
  APBTransactionV4Cursor *cursor;
} APBTransactionV4GetHistoryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4SolanaAccountId),
        .number = APBTransactionV4GetHistoryRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetHistoryRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cursor",
        .dataTypeSpecific.className = GPBStringifySymbol(APBTransactionV4Cursor),
        .number = APBTransactionV4GetHistoryRequest_FieldNumber_Cursor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4GetHistoryRequest__storage_, cursor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = APBTransactionV4GetHistoryRequest_Direction_EnumDescriptor,
        .number = APBTransactionV4GetHistoryRequest_FieldNumber_Direction,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBTransactionV4GetHistoryRequest__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetHistoryRequest class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetHistoryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBTransactionV4GetHistoryRequest_Direction_RawValue(APBTransactionV4GetHistoryRequest *message) {
  GPBDescriptor *descriptor = [APBTransactionV4GetHistoryRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetHistoryRequest_FieldNumber_Direction];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBTransactionV4GetHistoryRequest_Direction_RawValue(APBTransactionV4GetHistoryRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [APBTransactionV4GetHistoryRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetHistoryRequest_FieldNumber_Direction];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum APBTransactionV4GetHistoryRequest_Direction

GPBEnumDescriptor *APBTransactionV4GetHistoryRequest_Direction_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Asc\000Desc\000";
    static const int32_t values[] = {
        APBTransactionV4GetHistoryRequest_Direction_Asc,
        APBTransactionV4GetHistoryRequest_Direction_Desc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(APBTransactionV4GetHistoryRequest_Direction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:APBTransactionV4GetHistoryRequest_Direction_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL APBTransactionV4GetHistoryRequest_Direction_IsValidValue(int32_t value__) {
  switch (value__) {
    case APBTransactionV4GetHistoryRequest_Direction_Asc:
    case APBTransactionV4GetHistoryRequest_Direction_Desc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - APBTransactionV4GetHistoryResponse

@implementation APBTransactionV4GetHistoryResponse

@dynamic result;
@dynamic itemsArray, itemsArray_Count;

typedef struct APBTransactionV4GetHistoryResponse__storage_ {
  uint32_t _has_storage_[1];
  APBTransactionV4GetHistoryResponse_Result result;
  NSMutableArray *itemsArray;
} APBTransactionV4GetHistoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = APBTransactionV4GetHistoryResponse_Result_EnumDescriptor,
        .number = APBTransactionV4GetHistoryResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetHistoryResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(APBTransactionV4HistoryItem),
        .number = APBTransactionV4GetHistoryResponse_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(APBTransactionV4GetHistoryResponse__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetHistoryResponse class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetHistoryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBTransactionV4GetHistoryResponse_Result_RawValue(APBTransactionV4GetHistoryResponse *message) {
  GPBDescriptor *descriptor = [APBTransactionV4GetHistoryResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetHistoryResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBTransactionV4GetHistoryResponse_Result_RawValue(APBTransactionV4GetHistoryResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [APBTransactionV4GetHistoryResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetHistoryResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum APBTransactionV4GetHistoryResponse_Result

GPBEnumDescriptor *APBTransactionV4GetHistoryResponse_Result_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000NotFound\000";
    static const int32_t values[] = {
        APBTransactionV4GetHistoryResponse_Result_Ok,
        APBTransactionV4GetHistoryResponse_Result_NotFound,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(APBTransactionV4GetHistoryResponse_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:APBTransactionV4GetHistoryResponse_Result_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL APBTransactionV4GetHistoryResponse_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case APBTransactionV4GetHistoryResponse_Result_Ok:
    case APBTransactionV4GetHistoryResponse_Result_NotFound:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - APBTransactionV4SubmitTransactionRequest

@implementation APBTransactionV4SubmitTransactionRequest

@dynamic hasTransaction, transaction;
@dynamic hasInvoiceList, invoiceList;
@dynamic commitment;

typedef struct APBTransactionV4SubmitTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  APBCommonV4Commitment commitment;
  APBCommonV4Transaction *transaction;
  APBCommonV3InvoiceList *invoiceList;
} APBTransactionV4SubmitTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4Transaction),
        .number = APBTransactionV4SubmitTransactionRequest_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4SubmitTransactionRequest__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "invoiceList",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV3InvoiceList),
        .number = APBTransactionV4SubmitTransactionRequest_FieldNumber_InvoiceList,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4SubmitTransactionRequest__storage_, invoiceList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commitment",
        .dataTypeSpecific.enumDescFunc = APBCommonV4Commitment_EnumDescriptor,
        .number = APBTransactionV4SubmitTransactionRequest_FieldNumber_Commitment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBTransactionV4SubmitTransactionRequest__storage_, commitment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4SubmitTransactionRequest class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4SubmitTransactionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBTransactionV4SubmitTransactionRequest_Commitment_RawValue(APBTransactionV4SubmitTransactionRequest *message) {
  GPBDescriptor *descriptor = [APBTransactionV4SubmitTransactionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4SubmitTransactionRequest_FieldNumber_Commitment];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBTransactionV4SubmitTransactionRequest_Commitment_RawValue(APBTransactionV4SubmitTransactionRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [APBTransactionV4SubmitTransactionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4SubmitTransactionRequest_FieldNumber_Commitment];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - APBTransactionV4SubmitTransactionResponse

@implementation APBTransactionV4SubmitTransactionResponse

@dynamic result;
@dynamic hasSignature, signature;
@dynamic hasTransactionError, transactionError;
@dynamic invoiceErrorsArray, invoiceErrorsArray_Count;

typedef struct APBTransactionV4SubmitTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  APBTransactionV4SubmitTransactionResponse_Result result;
  APBCommonV4TransactionSignature *signature;
  APBCommonV4TransactionError *transactionError;
  NSMutableArray *invoiceErrorsArray;
} APBTransactionV4SubmitTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = APBTransactionV4SubmitTransactionResponse_Result_EnumDescriptor,
        .number = APBTransactionV4SubmitTransactionResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4SubmitTransactionResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4TransactionSignature),
        .number = APBTransactionV4SubmitTransactionResponse_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4SubmitTransactionResponse__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionError",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4TransactionError),
        .number = APBTransactionV4SubmitTransactionResponse_FieldNumber_TransactionError,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBTransactionV4SubmitTransactionResponse__storage_, transactionError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "invoiceErrorsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV3InvoiceError),
        .number = APBTransactionV4SubmitTransactionResponse_FieldNumber_InvoiceErrorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(APBTransactionV4SubmitTransactionResponse__storage_, invoiceErrorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4SubmitTransactionResponse class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4SubmitTransactionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBTransactionV4SubmitTransactionResponse_Result_RawValue(APBTransactionV4SubmitTransactionResponse *message) {
  GPBDescriptor *descriptor = [APBTransactionV4SubmitTransactionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4SubmitTransactionResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBTransactionV4SubmitTransactionResponse_Result_RawValue(APBTransactionV4SubmitTransactionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [APBTransactionV4SubmitTransactionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4SubmitTransactionResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum APBTransactionV4SubmitTransactionResponse_Result

GPBEnumDescriptor *APBTransactionV4SubmitTransactionResponse_Result_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000AlreadySubmitted\000Failed\000Rejected\000Invo"
        "iceError\000PayerRequired\000";
    static const int32_t values[] = {
        APBTransactionV4SubmitTransactionResponse_Result_Ok,
        APBTransactionV4SubmitTransactionResponse_Result_AlreadySubmitted,
        APBTransactionV4SubmitTransactionResponse_Result_Failed,
        APBTransactionV4SubmitTransactionResponse_Result_Rejected,
        APBTransactionV4SubmitTransactionResponse_Result_InvoiceError,
        APBTransactionV4SubmitTransactionResponse_Result_PayerRequired,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(APBTransactionV4SubmitTransactionResponse_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:APBTransactionV4SubmitTransactionResponse_Result_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL APBTransactionV4SubmitTransactionResponse_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case APBTransactionV4SubmitTransactionResponse_Result_Ok:
    case APBTransactionV4SubmitTransactionResponse_Result_AlreadySubmitted:
    case APBTransactionV4SubmitTransactionResponse_Result_Failed:
    case APBTransactionV4SubmitTransactionResponse_Result_Rejected:
    case APBTransactionV4SubmitTransactionResponse_Result_InvoiceError:
    case APBTransactionV4SubmitTransactionResponse_Result_PayerRequired:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - APBTransactionV4GetTransactionRequest

@implementation APBTransactionV4GetTransactionRequest

@dynamic hasTransactionId, transactionId;
@dynamic commitment;

typedef struct APBTransactionV4GetTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  APBCommonV4Commitment commitment;
  APBCommonV4TransactionId *transactionId;
} APBTransactionV4GetTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionId",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4TransactionId),
        .number = APBTransactionV4GetTransactionRequest_FieldNumber_TransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetTransactionRequest__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commitment",
        .dataTypeSpecific.enumDescFunc = APBCommonV4Commitment_EnumDescriptor,
        .number = APBTransactionV4GetTransactionRequest_FieldNumber_Commitment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4GetTransactionRequest__storage_, commitment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetTransactionRequest class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetTransactionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBTransactionV4GetTransactionRequest_Commitment_RawValue(APBTransactionV4GetTransactionRequest *message) {
  GPBDescriptor *descriptor = [APBTransactionV4GetTransactionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetTransactionRequest_FieldNumber_Commitment];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBTransactionV4GetTransactionRequest_Commitment_RawValue(APBTransactionV4GetTransactionRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [APBTransactionV4GetTransactionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetTransactionRequest_FieldNumber_Commitment];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - APBTransactionV4GetTransactionResponse

@implementation APBTransactionV4GetTransactionResponse

@dynamic state;
@dynamic slot;
@dynamic confirmations;
@dynamic hasItem, item;

typedef struct APBTransactionV4GetTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  APBTransactionV4GetTransactionResponse_State state;
  uint32_t confirmations;
  APBTransactionV4HistoryItem *item;
  uint64_t slot;
} APBTransactionV4GetTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = APBTransactionV4GetTransactionResponse_State_EnumDescriptor,
        .number = APBTransactionV4GetTransactionResponse_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4GetTransactionResponse__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "slot",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4GetTransactionResponse_FieldNumber_Slot,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4GetTransactionResponse__storage_, slot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "confirmations",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4GetTransactionResponse_FieldNumber_Confirmations,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBTransactionV4GetTransactionResponse__storage_, confirmations),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "item",
        .dataTypeSpecific.className = GPBStringifySymbol(APBTransactionV4HistoryItem),
        .number = APBTransactionV4GetTransactionResponse_FieldNumber_Item,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(APBTransactionV4GetTransactionResponse__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4GetTransactionResponse class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4GetTransactionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBTransactionV4GetTransactionResponse_State_RawValue(APBTransactionV4GetTransactionResponse *message) {
  GPBDescriptor *descriptor = [APBTransactionV4GetTransactionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetTransactionResponse_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBTransactionV4GetTransactionResponse_State_RawValue(APBTransactionV4GetTransactionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [APBTransactionV4GetTransactionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBTransactionV4GetTransactionResponse_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum APBTransactionV4GetTransactionResponse_State

GPBEnumDescriptor *APBTransactionV4GetTransactionResponse_State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Success\000Failed\000Pending\000";
    static const int32_t values[] = {
        APBTransactionV4GetTransactionResponse_State_Unknown,
        APBTransactionV4GetTransactionResponse_State_Success,
        APBTransactionV4GetTransactionResponse_State_Failed,
        APBTransactionV4GetTransactionResponse_State_Pending,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(APBTransactionV4GetTransactionResponse_State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:APBTransactionV4GetTransactionResponse_State_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL APBTransactionV4GetTransactionResponse_State_IsValidValue(int32_t value__) {
  switch (value__) {
    case APBTransactionV4GetTransactionResponse_State_Unknown:
    case APBTransactionV4GetTransactionResponse_State_Success:
    case APBTransactionV4GetTransactionResponse_State_Failed:
    case APBTransactionV4GetTransactionResponse_State_Pending:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - APBTransactionV4HistoryItem

@implementation APBTransactionV4HistoryItem

@dynamic rawTransactionOneOfCase;
@dynamic hasTransactionId, transactionId;
@dynamic hasCursor, cursor;
@dynamic solanaTransaction;
@dynamic stellarTransaction;
@dynamic hasTransactionError, transactionError;
@dynamic paymentsArray, paymentsArray_Count;
@dynamic hasInvoiceList, invoiceList;

typedef struct APBTransactionV4HistoryItem__storage_ {
  uint32_t _has_storage_[2];
  APBCommonV4TransactionId *transactionId;
  APBTransactionV4Cursor *cursor;
  APBCommonV4Transaction *solanaTransaction;
  APBCommonV4StellarTransaction *stellarTransaction;
  APBCommonV4TransactionError *transactionError;
  NSMutableArray *paymentsArray;
  APBCommonV3InvoiceList *invoiceList;
} APBTransactionV4HistoryItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionId",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4TransactionId),
        .number = APBTransactionV4HistoryItem_FieldNumber_TransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cursor",
        .dataTypeSpecific.className = GPBStringifySymbol(APBTransactionV4Cursor),
        .number = APBTransactionV4HistoryItem_FieldNumber_Cursor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem__storage_, cursor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "solanaTransaction",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4Transaction),
        .number = APBTransactionV4HistoryItem_FieldNumber_SolanaTransaction,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem__storage_, solanaTransaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stellarTransaction",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4StellarTransaction),
        .number = APBTransactionV4HistoryItem_FieldNumber_StellarTransaction,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem__storage_, stellarTransaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transactionError",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4TransactionError),
        .number = APBTransactionV4HistoryItem_FieldNumber_TransactionError,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem__storage_, transactionError),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "paymentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(APBTransactionV4HistoryItem_Payment),
        .number = APBTransactionV4HistoryItem_FieldNumber_PaymentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem__storage_, paymentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "invoiceList",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV3InvoiceList),
        .number = APBTransactionV4HistoryItem_FieldNumber_InvoiceList,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem__storage_, invoiceList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4HistoryItem class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4HistoryItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "rawTransaction",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void APBTransactionV4HistoryItem_ClearRawTransactionOneOfCase(APBTransactionV4HistoryItem *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - APBTransactionV4HistoryItem_Payment

@implementation APBTransactionV4HistoryItem_Payment

@dynamic hasSource, source;
@dynamic hasDestination, destination;
@dynamic amount;
@dynamic index;

typedef struct APBTransactionV4HistoryItem_Payment__storage_ {
  uint32_t _has_storage_[1];
  uint32_t index;
  APBCommonV4SolanaAccountId *source;
  APBCommonV4SolanaAccountId *destination;
  int64_t amount;
} APBTransactionV4HistoryItem_Payment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "source",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4SolanaAccountId),
        .number = APBTransactionV4HistoryItem_Payment_FieldNumber_Source,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem_Payment__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "destination",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4SolanaAccountId),
        .number = APBTransactionV4HistoryItem_Payment_FieldNumber_Destination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem_Payment__storage_, destination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4HistoryItem_Payment_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem_Payment__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4HistoryItem_Payment_FieldNumber_Index,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(APBTransactionV4HistoryItem_Payment__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4HistoryItem_Payment class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4HistoryItem_Payment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(APBTransactionV4HistoryItem)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APBTransactionV4Cursor

@implementation APBTransactionV4Cursor

@dynamic value;

typedef struct APBTransactionV4Cursor__storage_ {
  uint32_t _has_storage_[1];
  NSData *value;
} APBTransactionV4Cursor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = APBTransactionV4Cursor_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBTransactionV4Cursor__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBTransactionV4Cursor class]
                                     rootClass:[APBTransactionV4TransactionServiceRoot class]
                                          file:APBTransactionV4TransactionServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBTransactionV4Cursor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
