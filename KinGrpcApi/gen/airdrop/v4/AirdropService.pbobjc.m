// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: airdrop/v4/airdrop_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "airdrop/v4/AirdropService.pbobjc.h"
#import "validate/Validate.pbobjc.h"
#import "common/v4/Model.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - APBAirdropV4AirdropServiceRoot

@implementation APBAirdropV4AirdropServiceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[ValidateRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - APBAirdropV4AirdropServiceRoot_FileDescriptor

static GPBFileDescriptor *APBAirdropV4AirdropServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"kin.agora.airdrop.v4"
                                                 objcPrefix:@"APBAirdropV4"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - APBAirdropV4RequestAirdropRequest

@implementation APBAirdropV4RequestAirdropRequest

@dynamic hasAccountId, accountId;
@dynamic quarks;
@dynamic commitment;

typedef struct APBAirdropV4RequestAirdropRequest__storage_ {
  uint32_t _has_storage_[1];
  APBCommonV4Commitment commitment;
  APBCommonV4SolanaAccountId *accountId;
  uint64_t quarks;
} APBAirdropV4RequestAirdropRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4SolanaAccountId),
        .number = APBAirdropV4RequestAirdropRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBAirdropV4RequestAirdropRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quarks",
        .dataTypeSpecific.className = NULL,
        .number = APBAirdropV4RequestAirdropRequest_FieldNumber_Quarks,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBAirdropV4RequestAirdropRequest__storage_, quarks),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "commitment",
        .dataTypeSpecific.enumDescFunc = APBCommonV4Commitment_EnumDescriptor,
        .number = APBAirdropV4RequestAirdropRequest_FieldNumber_Commitment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(APBAirdropV4RequestAirdropRequest__storage_, commitment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBAirdropV4RequestAirdropRequest class]
                                     rootClass:[APBAirdropV4AirdropServiceRoot class]
                                          file:APBAirdropV4AirdropServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBAirdropV4RequestAirdropRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBAirdropV4RequestAirdropRequest_Commitment_RawValue(APBAirdropV4RequestAirdropRequest *message) {
  GPBDescriptor *descriptor = [APBAirdropV4RequestAirdropRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBAirdropV4RequestAirdropRequest_FieldNumber_Commitment];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBAirdropV4RequestAirdropRequest_Commitment_RawValue(APBAirdropV4RequestAirdropRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [APBAirdropV4RequestAirdropRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBAirdropV4RequestAirdropRequest_FieldNumber_Commitment];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - APBAirdropV4RequestAirdropResponse

@implementation APBAirdropV4RequestAirdropResponse

@dynamic result;
@dynamic hasSignature, signature;

typedef struct APBAirdropV4RequestAirdropResponse__storage_ {
  uint32_t _has_storage_[1];
  APBAirdropV4RequestAirdropResponse_Result result;
  APBCommonV4TransactionSignature *signature;
} APBAirdropV4RequestAirdropResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = APBAirdropV4RequestAirdropResponse_Result_EnumDescriptor,
        .number = APBAirdropV4RequestAirdropResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APBAirdropV4RequestAirdropResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(APBCommonV4TransactionSignature),
        .number = APBAirdropV4RequestAirdropResponse_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(APBAirdropV4RequestAirdropResponse__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APBAirdropV4RequestAirdropResponse class]
                                     rootClass:[APBAirdropV4AirdropServiceRoot class]
                                          file:APBAirdropV4AirdropServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APBAirdropV4RequestAirdropResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t APBAirdropV4RequestAirdropResponse_Result_RawValue(APBAirdropV4RequestAirdropResponse *message) {
  GPBDescriptor *descriptor = [APBAirdropV4RequestAirdropResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBAirdropV4RequestAirdropResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetAPBAirdropV4RequestAirdropResponse_Result_RawValue(APBAirdropV4RequestAirdropResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [APBAirdropV4RequestAirdropResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:APBAirdropV4RequestAirdropResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum APBAirdropV4RequestAirdropResponse_Result

GPBEnumDescriptor *APBAirdropV4RequestAirdropResponse_Result_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000NotFound\000InsufficientKin\000";
    static const int32_t values[] = {
        APBAirdropV4RequestAirdropResponse_Result_Ok,
        APBAirdropV4RequestAirdropResponse_Result_NotFound,
        APBAirdropV4RequestAirdropResponse_Result_InsufficientKin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(APBAirdropV4RequestAirdropResponse_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:APBAirdropV4RequestAirdropResponse_Result_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL APBAirdropV4RequestAirdropResponse_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case APBAirdropV4RequestAirdropResponse_Result_Ok:
    case APBAirdropV4RequestAirdropResponse_Result_NotFound:
    case APBAirdropV4RequestAirdropResponse_Result_InsufficientKin:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
